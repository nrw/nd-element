// Generated by CoffeeScript 1.7.1
(function() {
  var clear, domify, through, _count;

  through = require('through2');

  domify = require('domify');

  _count = 0;

  module.exports = function(elem, opts) {
    var cmp;
    if (opts == null) {
      opts = {};
    }
    opts.point || (opts.point = 'data-point');
    opts.container || (opts.container = 'data-container');
    opts.tag || (opts.tag = 'div');
    opts.id = opts.id || elem.getAttribute('id') || ("nd-element-" + (_count++));
    elem.setAttribute('id', opts.id);
    cmp = function(a, b) {
      var ka, kb;
      ka = parseInt(a.getAttribute(opts.container), 10);
      kb = parseInt(b.getAttribute(opts.container), 10);
      if (ka < kb) {
        return -1;
      } else {
        return 1;
      }
    };
    return through.obj(function(chunk, enc, cb) {
      var child, el, found, i, id, match, parent, search, sorted, step, steps, str, _i, _j, _len, _len1;
      el = domify(chunk);
      if (!(steps = el.getAttribute(opts.point))) {
        return cb();
      }
      search = elem;
      steps = steps.split(',');
      if (id = el.getAttribute('id')) {
        if (found = elem.querySelector('#' + id)) {
          parent = found.parentNode;
          parent.removeChild(found);
          clear(elem, parent);
        }
      }
      str = '#' + opts.id;
      for (_i = 0, _len = steps.length; _i < _len; _i++) {
        step = steps[_i];
        str += "> [" + opts.container + "=\"" + step + "\"]";
        match = search.querySelector(str);
        if (match === null) {
          match = domify("<" + opts.tag + " " + opts.container + "=\"" + step + "\"></" + opts.tag + ">");
          search.appendChild(match);
        }
        sorted = [].slice.call(search.children);
        sorted.sort(cmp);
        for (i = _j = 0, _len1 = sorted.length; _j < _len1; i = ++_j) {
          child = sorted[i];
          if (child === search.childNodes[i]) {
            continue;
          }
          search.removeChild(child);
          search.insertBefore(child, search.childNodes[i]);
        }
        search = match;
      }
      search.appendChild(el);
      this.push(chunk);
      return cb();
    });
  };

  clear = function(base, el) {
    var parent;
    if (base === el) {
      return;
    }
    if ((el != null ? el.innerHTML : void 0) !== '') {
      return;
    }
    parent = el.parentNode;
    parent.removeChild(el);
    return clear(base, parent);
  };

}).call(this);
