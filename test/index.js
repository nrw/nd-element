// Generated by CoffeeScript 1.7.1
(function() {
  var clear, concat, domify, ndelement, test, write;

  test = require('tape');

  concat = require('concat-stream');

  domify = require('domify');

  ndelement = require('../');

  write = function(stream, objs) {
    var obj, _i, _len;
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      stream.write(obj);
    }
    return stream.end();
  };

  clear = function() {
    var elem;
    elem = document.querySelector('#content');
    elem.innerHTML = '';
    return elem;
  };

  test('setup', function(t) {
    document.body.appendChild(domify('<div id="content"></div>'));
    return t.end();
  });

  test('basic', function(t) {
    var elem, stream;
    elem = clear();
    stream = ndelement(elem, {
      container: 'd'
    });
    stream.pipe(concat(function() {
      t.same(elem.innerHTML, '<div d="0"><div d="0"><div d="1"><div data-point="0,0,1">a</div></div><div d="2"><div data-point="0,0,2">b</div></div></div><div d="1"><div d="3"><div data-point="0,1,3">d</div></div></div></div><div d="2"><div d="0"><div d="2"><div data-point="2,0,2">c</div></div></div></div>');
      return t.end();
    }));
    return write(stream, ['<div data-point="0,0,1">a</div>', '<div data-point="0,0,2">b</div>', '<div data-point="2,0,2">c</div>', '<div data-point="0,1,3">d</div>']);
  });

  test('overwrites elements with ids', function(t) {
    var elem, stream;
    elem = clear();
    stream = ndelement(elem, {
      container: 'd'
    });
    stream.pipe(concat(function() {
      t.same(elem.innerHTML, '<div d="0"><div d="0"><div d="1"><div id="a" data-point="0,0,1">c</div></div></div></div>');
      return t.end();
    }));
    return write(stream, ['<div id="a" data-point="0,0,1">a</div>', '<div id="a" data-point="0,0,1">b</div>', '<div id="a" data-point="0,0,1">c</div>']);
  });

  test('removes empty nodes', function(t) {
    var elem, stream;
    elem = clear();
    stream = ndelement(elem);
    stream.pipe(concat(function() {
      t.same(elem.innerHTML, '<div data-container="0"><div data-container="0"><div data-container="1"><div id="a" data-point="0,0,1">c</div></div></div></div>');
      return t.end();
    }));
    return write(stream, ['<div id="a" data-point="0,0,2">a</div>', '<div id="a" data-point="2,9,3">b</div>', '<div id="a" data-point="0,0,1">c</div>']);
  });

}).call(this);
